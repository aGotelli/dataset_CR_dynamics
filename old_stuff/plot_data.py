import numpy as np
import matplotlib.pyplot as plt
import argparse
import os

def load_data(filename):
    """
    Load data from the output file generated by readMark10_2.py
    
    Args:
        filename (str): Path to the data file
        
    Returns:
        tuple: (timestamps, values) as numpy arrays
    """
    if not os.path.exists(filename):
        raise FileNotFoundError(f"Data file '{filename}' not found")
    
    # Load data: first column is timestamp, second column is sensor value
    data = np.loadtxt(filename)
    timestamps = data[:, 0]
    values = data[:, 1]
    
    return timestamps, values

def plot_data(timestamps, values, filename):
    """
    Plot the sensor data over time
    
    Args:
        timestamps (np.array): Array of timestamps
        values (np.array): Array of sensor values
        filename (str): Original filename for the plot title
    """
    # Convert timestamps to relative time (seconds from start)
    relative_time = timestamps - timestamps[0]
    
    # Create the plot
    plt.figure(figsize=(12, 6))
    plt.plot(relative_time, values, 'b-', linewidth=1, alpha=0.8)
    plt.xlabel('Time (seconds)')
    plt.ylabel('Sensor Value')
    plt.title(f'Mark10-2 Sensor Data - {filename}')
    plt.grid(True, alpha=0.3)
    
    # Add some statistics to the plot
    mean_val = np.mean(values)
    std_val = np.std(values)
    min_val = np.min(values)
    max_val = np.max(values)
    
    stats_text = f'Mean: {mean_val:.2f}\nStd: {std_val:.2f}\nMin: {min_val:.2f}\nMax: {max_val:.2f}'
    plt.text(0.02, 0.98, stats_text, transform=plt.gca().transAxes, 
             verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
    
    plt.tight_layout()
    plt.show()

def main():
    # Set up command-line argument parsing
    parser = argparse.ArgumentParser(description="Plot data from Mark10-2 sensor")
    parser.add_argument('filename', type=str, nargs='?', default='data_output.txt',
                       help="Data file to plot (default: data_output.txt)")
    args = parser.parse_args()
    
    try:
        # Load the data
        print(f"Loading data from {args.filename}...")
        timestamps, values = load_data(args.filename)
        
        print(f"Loaded {len(timestamps)} data points")
        print(f"Time range: {timestamps[-1] - timestamps[0]:.2f} seconds")
        print(f"Value range: {np.min(values):.2f} to {np.max(values):.2f}")
        
        # Plot the data
        plot_data(timestamps, values, args.filename)
        
    except FileNotFoundError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Error loading or plotting data: {e}")

if __name__ == "__main__":
    main()
